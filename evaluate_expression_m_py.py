# -*- coding: utf-8 -*-
"""evaluate_expression_m.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q2DsfypiCQ9HZ3k1IZHYBc_bBkYq7yWL
"""

class EvalExpression():

  def evaluate(self, s: str) -> int:

      #Your code here
      operators = ['-','+','*','/'] #A list of strings of all of the mathematical operations
      operator_stack = [] #To append the operator strings into the stack
      operand_stack = [] # #To append the operands strings into the stack
      result = 0 ##Result of the operation being added to the stack
      tracker = 0 # Tracker starts off to look at the beginning of the string
      i = 0 #keep track of each character in string
      j = 0 #keep track of each character in string

      while i < len(s): #Iterating through input string and keeping tracking of length
        if s[i] in operators: #Check if a operator is located inside the opss list
          if operator_stack: ##If so...
            operand_stack.append(int(s[tracker:j]))

            if s[i] == '*' or s[i] == '/': #If the character within the string is a addition or subtraction sign
                      num_1 = operand_stack.pop() #Take out the first number located in the string
                      num_2 = operand_stack.pop() #take out the second number located in the string
                      sign = operator_stack.pop() #Take out the first sign located in the string

                      if sign == '/': #If the sign is multiplication
                          result = num_2 // num_1 #multiply both the second and first number popped from before
                          operand_stack.append(result) #Push or add that result to the num_stack

                      elif sign == '*': #If the sign is division
                          result = num_2 * num_1 #Divide both the second and first numbers popped (No decimals!)
                          operand_stack.append(result) #Push or add that result to the num_stack

                      else:
                          operator_stack.append(sign)
                          operand_stack.append(num_2)
                          operand_stack.append(num_1)
                      operator_stack.append(s[i])

            if s[i] == '+' or s[i] == '-':
                       num_1 = operand_stack.pop()
                       num_2 = operand_stack.pop()
                       sign = operator_stack.pop()

                       if sign == '-':
                         result = num_2 - num_1
                         operand_stack.append(result)

                       elif sign == '+':
                          result = num_2 + num_1
                          operand_stack.append(result)

                       else:
                            operator_stack.append(sign)
                            operand_stack.append(num_2)
                            operand_stack.append(num_1)
                       operator_stack.append(s[i])

          else:
            operand_stack.append(int(s[tracker:j]))
            operator_stack.append(s[i])
          tracker = j + 1
          j = tracker
        else:
          j += 1
        i += 1

      operand_stack.append(int(s[tracker:j]))

      num_1 = operand_stack.pop()
      num_2 = operand_stack.pop()
      sign = operator_stack.pop()

      if sign == '*':
        result = num_2 * num_1
        operand_stack.append(result)
      elif sign == '/':
        result = num_2 // num_1
        operand_stack.append(result)
      elif sign == '+':
        result = num_2 + num_1
        operand_stack.append(result)
      elif sign == '-':
        result = num_2 - num_1
        operand_stack.append(result)

      res = 0
      while len(operand_stack) > 1:
        num_1 = operand_stack.pop()
        num_2 = operand_stack.pop()
        operator = operator_stack.pop()

        if operator == '*':
          res = num_2 * num_1
        elif operator == '/':
          res = num_2 // num_1
        operand_stack.append(res)
      return operand_stack[0]

class EvalExpression():

    def evaluate(self, s: str) -> int:
        operators = ['-','+','*','/']
        operator_stack = []
        operand_stack = []
        result = 0
        tracker = 0
        i = 0
        j = 0

        while i < len(s): #Loop through each character in the string
            if s[i] in operators:
                if operator_stack:
                    operand_stack.append(int(s[tracker:j]))

                    while operator_stack and operators.index(s[i]) <= operators.index(operator_stack[-1]):
                    # Process operators with higher or equal precedence from the operator stack
                        num_1 = operand_stack.pop()
                        num_2 = operand_stack.pop()
                        sign = operator_stack.pop()

                        if sign == '/':
                            result = num_2 // num_1
                        elif sign == '*':
                            result = num_2 * num_1
                        elif sign == '-':
                            result = num_2 - num_1
                        elif sign == '+':
                            result = num_2 + num_1

                        operand_stack.append(result)

                    operator_stack.append(s[i])

                else:
                    operand_stack.append(int(s[tracker:j]))
                    operator_stack.append(s[i])
                # Update the tracker and reset the operand construction iterator
                tracker = j + 1
                j = tracker
            else:
                j += 1
            i += 1

        operand_stack.append(int(s[tracker:j]))

        while operator_stack: #As long as the stack is not empty, take out to two numbers and an operator to perform mathematical equation
            num_1 = operand_stack.pop()
            num_2 = operand_stack.pop()
            sign = operator_stack.pop()

            if sign == '/':
                result = num_2 // num_1
            elif sign == '*':
                result = num_2 * num_1
            elif sign == '-':
                result = num_2 - num_1
            elif sign == '+':
                result = num_2 + num_1

            operand_stack.append(result)

        return operand_stack[0]

s=EvalExpression()
MyOutput=EvalExpression.evaluate(s, "1000 - 400 / 2" )
print(MyOutput)